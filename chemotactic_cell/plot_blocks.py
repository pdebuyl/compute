#!/usr/bin/env python
"""
Display the block correlators for the mean squared displacement, the velocity
autocorrelation and the angular velocity autocorrelation.

The input file is a HDF5 file with a root group "block_correlators" generated by RMPCDMD's
program chemotactic_cell.
"""
from __future__ import print_function, division
import h5py
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import fftconvolve
from scipy.optimize import leastsq, curve_fit
from scipy.integrate import simps, cumtrapz

plt.rcParams['figure.figsize'] = (10, 8)
plt.rcParams['figure.subplot.hspace'] = 0.25
plt.rcParams['figure.subplot.left'] = 0.17
plt.rcParams['axes.labelsize'] = 16

def fitfunc(p, t):
    return p[0]*np.exp(-p[1]*t)

def _fitfunc(t, f0, tau):
    return f0*np.exp(-t/tau)

def errfunc(p, t, y):
    return fitfunc(p, t) - y

def get_block_data(block, dt, dim=3):
    t_data = []
    data = []
    for i in range(block.shape[0]):
        t = dt*np.arange(block.shape[1])*block.shape[1]**i
        t_data.append(t[1:])
        data.append(block[i,1:,:,:].reshape((-1,dim)))

    return np.concatenate(t_data), np.concatenate(data)

import argparse

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('file', type=str, help='H5MD datafile', nargs='+')
args = parser.parse_args()

monomer_mass = 1130
I = 2*monomer_mass*(6.7/2)**2
T=1/3

msd_all = []
vacf_all = []
tvacf_all = []
pvacf_all = []
oacf_all = []
wacf_all = []
omega_all = []
r12_all = []

for f in args.file:
    a = h5py.File(f, 'r')

    msd = a['block_correlators/mean_square_displacement/value'][:]
    msd_count = a['block_correlators/mean_square_displacement/count'][:]
    msd /= msd_count.reshape((-1, 1, 1, 1))
    msd_tau = a['block_correlators/mean_square_displacement/time'][()]
    msd_t, msd_data = get_block_data(msd, msd_tau)
    msd_all.append(msd_data)

    vacf = a['block_correlators/velocity_autocorrelation/value'][:]
    vacf_count = a['block_correlators/velocity_autocorrelation/count'][:]
    vacf /= vacf_count.reshape((-1, 1, 1, 1))
    vacf_tau = a['block_correlators/velocity_autocorrelation/time'][()]
    vacf_t, vacf_data = get_block_data(vacf, vacf_tau)
    vacf_all.append(vacf_data)

    oacf = a['block_correlators/orientation_autocorrelation/value'][:]
    oacf_count = a['block_correlators/orientation_autocorrelation/count'][:]
    oacf /= oacf_count.reshape((-1, 1, 1, 1))
    oacf_tau = a['block_correlators/orientation_autocorrelation/time'][()]
    oacf_t, oacf_data = get_block_data(oacf, oacf_tau)
    oacf_all.append(oacf_data)

    edges = a['/particles/dimer/box/edges'][:2].reshape((1,1,2))
    r = a['/particles/dimer/position/value'][:,:,:2] + a['/particles/dimer/image/value'][:,:,:2]*edges
    r12_tau = a['/particles/dimer/position/time'][()]
    r12 = r[:,1,:] - r[:,0,:]
    r12 /= np.sqrt((r12**2).sum(axis=-1)).reshape((-1,1))

    r12_acf = (
        fftconvolve(r12[:,0], r12[::-1,0])[len(r12)-1:] / (len(r12) - np.arange(len(r12))) +
        fftconvolve(r12[:,1], r12[::-1,1])[len(r12)-1:] / (len(r12) - np.arange(len(r12))) )
        #fftconvolve(r12[:,2], r12[::-1,2])[len(r12)-1:] / (len(r12) - np.arange(len(r12))) )
    r12_all.append(r12_acf)

    if 'planar_angular_velocity_autocorrelation' in a['block_correlators']:
        wacf = a['block_correlators/planar_angular_velocity_autocorrelation/value'][:]
        wacf_count = a['block_correlators/planar_angular_velocity_autocorrelation/count'][:]
        wacf /= wacf_count.reshape((-1, 1, 1, 1))
        wacf_tau = a['block_correlators/planar_angular_velocity_autocorrelation/time'][()]
        wacf_t, w_data = get_block_data(wacf, wacf_tau, dim=1)
        wacf_all.append(w_data.flatten())

    if 'omega' in a['observables']:
        omega = a['observables/omega/value'][:]
        omega = omega[:]
        omega_tau = a['observables/omega/time'][()]
        omega_acf = fftconvolve(omega, omega[::-1])[len(omega)-1:] / (len(omega) - np.arange(len(omega)))
        omega_all.append(omega_acf)

    do_pvacf = 'parallel_velocity_autocorrelation' in a['block_correlators']
    if do_pvacf:
        pvacf = a['block_correlators/parallel_velocity_autocorrelation/value'][:]
        pvacf_count = a['block_correlators/parallel_velocity_autocorrelation/count'][:]
        pvacf /= pvacf_count.reshape((-1, 1, 1, 1))
        pvacf_tau = a['block_correlators/parallel_velocity_autocorrelation/time'][()]
        pvacf_t, pvacf_data = get_block_data(pvacf, pvacf_tau)
        pvacf_all.append(pvacf_data)

    do_tvacf = 'transverse_velocity_autocorrelation' in a['block_correlators']
    if do_tvacf:
        tvacf = a['block_correlators/transverse_velocity_autocorrelation/value'][:]
        tvacf_count = a['block_correlators/transverse_velocity_autocorrelation/count'][:]
        tvacf /= tvacf_count.reshape((-1, 1, 1, 1))
        tvacf_tau = a['block_correlators/transverse_velocity_autocorrelation/time'][()]
        tvacf_t, tvacf_data = get_block_data(tvacf, tvacf_tau)
        tvacf_all.append(tvacf_data)

    a.close()

do_w = len(wacf_all)>0 and len(omega_all)>0

msd_all = np.array(msd_all)
vacf_all = np.array(vacf_all)
pvacf_all = np.array(pvacf_all)
tvacf_all = np.array(tvacf_all)
oacf_all = np.array(oacf_all)
r12_all = np.array(r12_all)
if do_w:
    wacf_all = np.array(wacf_all)
    omega_all = np.array(omega_all)

ax1 = plt.subplot(211)
plt.ylabel(r'$\langle \mathbf{v}(\tau)\cdot\mathbf{v}(0) \rangle$')
plt.plot(vacf_t, vacf_all.mean(axis=0), marker='o')
plt.xscale('log')
ax2 = plt.subplot(212)
plt.ylabel(r'$\langle (\mathbf{r}(\tau) - \mathbf{r}(0))^2 \rangle$')
plt.plot(msd_t, msd_all.mean(axis=0), marker='o')
plt.xlabel(r'$\tau$')
plt.loglog()

plt.figure()
ax1 = plt.subplot(211)
plt.ylabel(r'tvacf')
m = tvacf_all.sum(axis=-1).mean(axis=0)
plt.plot(tvacf_t, m, marker='o')
plt.plot(tvacf_t, cumtrapz(m, tvacf_t, initial=0))
plt.xscale('log')

ax2 = plt.subplot(212, sharex=ax1)
plt.ylabel(r'pvacf')
m = pvacf_all.sum(axis=-1).mean(axis=0)
plt.plot(pvacf_t, m, marker='o')
plt.plot(pvacf_t, cumtrapz(m, pvacf_t, initial=0))
plt.xscale('log')

plt.figure()
ax1 = plt.subplot(211)
plt.ylabel(r'$\langle \hat \mathbf{u}(\tau) \cdot \hat \mathbf{u}(0) \rangle$')
m = oacf_all.sum(axis=-1).mean(axis=0)
plt.plot(oacf_t, m, marker='o')
popt, pcov = curve_fit(_fitfunc, oacf_t, m, sigma=np.sqrt(oacf_t))
plt.plot(oacf_t, _fitfunc(oacf_t, *popt), 'k-')
plt.xscale('log')
D_oacf = 1/popt[1]
print('oacf exponential fit: D=%5.3e' % D_oacf)
plt.plot(r12_tau*np.arange(r12_all.shape[1]), r12_all.mean(axis=0), 'k--')

plt.subplot(212, sharex=ax1)
plt.ylabel(r'$\langle \hat \mathbf{u}(\tau) \cdot \hat \mathbf{u}(0) \rangle$ (2D)')
m = oacf_all[...,0:2].sum(axis=-1).mean(axis=0)
plt.plot(oacf_t, m, marker='o')
popt, pcov = curve_fit(_fitfunc, oacf_t, m, sigma=np.sqrt(oacf_t))
plt.plot(oacf_t, _fitfunc(oacf_t, *popt), 'k-')
plt.plot(r12_tau*np.arange(r12_all.shape[1]), r12_all.mean(axis=0), 'k--')
D_oacf_2D = 1/popt[1]
print('oacf 2D exponential fit: D=%5.3e' % D_oacf)
plt.xlabel(r'$\tau$')


if do_w:
    plt.figure()
    plt.subplot(211)
    plt.ylabel(r'$\langle \dot\phi(\tau) \dot\phi(0) \rangle$')
    t = omega_tau*np.arange(omega_all.shape[1])
    plt.plot(t, omega_all.mean(axis=0))
    plt.plot(wacf_t, wacf_all.mean(axis=0))
    popt, pcov = curve_fit(_fitfunc, wacf_t, wacf_all.mean(axis=0), sigma=np.sqrt(wacf_t))
    gamma = I/popt[1]
    plt.plot(wacf_t, _fitfunc(wacf_t, *popt))
    print('wacf exponential fit: D=%5.3e' % (T/gamma))
    plt.xscale('log')
    plt.subplot(212)
    plt.ylabel(r"$\int_0^\tau \langle \dot\phi(\tau') \dot\phi(0) \rangle d\tau'$")
    plt.plot(t, cumtrapz(omega_all.mean(axis=0), t, initial=0))
    plt.plot(t, cumtrapz(omega_all.mean(axis=0), t, initial=0))
    plt.plot(wacf_t, cumtrapz(wacf_all.mean(axis=0), wacf_t, initial=0), marker='o')
    plt.xscale('log')
    plt.xlabel(r'$\tau$')
    plt.axhline(D_oacf)

    print('wacf[0] %5.3e' % (wacf_all[:,0].mean(axis=0)*I))


plt.show()
